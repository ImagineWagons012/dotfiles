#+TITLE: Justinlime's Emacs
#+AUTHOR: justinlime
#+DESCRIPTION: Justinlime's Emacs
#+PROPERTY: header-args :tangle yes
#+STARTUP: showeverything

* TABLE OF CONTENTS :TOC_4:
- [[#general][General]]
  - [[#package-manger][Package Manger]]
  - [[#misc-preferences][Misc Preferences]]
  - [[#custom-functions][Custom Functions]]
- [[#keybinds][Keybinds]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-binds][General Binds]]
  - [[#keychord-binds][Keychord Binds]]
- [[#functionality][Functionality]]
  - [[#general-1][General]]
    - [[#which-key][Which Key]]
    - [[#neotree][Neotree]]
    - [[#tramp][Tramp]]
    - [[#consult][Consult]]
    - [[#undo-tree][Undo Tree]]
  - [[#programming][Programming]]
    - [[#lspcompletion][LSP/Completion]]
      - [[#eglot][Eglot]]
      - [[#corfu][Corfu]]
      - [[#cape][Cape]]
      - [[#orderless][Orderless]]
      - [[#vertico][Vertico]]
      - [[#yasnippet][Yasnippet]]
    - [[#magit][Magit]]
    - [[#git-gutter][Git Gutter]]
    - [[#term][Term]]
    - [[#modes][Modes]]
      - [[#python-mode][Python Mode]]
      - [[#javascript-mode][Javascript Mode]]
      - [[#typescript-mode][TypeScript Mode]]
      - [[#vue-mode][Vue Mode]]
      - [[#go-mode][Go Mode]]
      - [[#nix-mode][Nix Mode]]
      - [[#lua-mode][Lua Mode]]
  - [[#modes-1][Modes]]
    - [[#markdown-mode][Markdown Mode]]
    - [[#org-mode][Org Mode]]
      - [[#org-general][Org General]]
      - [[#org-table-of-contents][Org Table of Contents]]
      - [[#org-modern][Org Modern]]
- [[#look--feel][Look & Feel]]
  - [[#general-2][General]]
    - [[#themes][Themes]]
    - [[#dired-rainbow][Dired Rainbow]]
    - [[#modeline][Modeline]]
    - [[#gui-settings][GUI Settings]]
    - [[#fonts][Fonts]]
    - [[#icons][Icons]]
    - [[#erc][ERC]]
    - [[#dashboard][Dashboard]]
  - [[#programming-1][Programming]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#treesitter][Treesitter]]

* General
** Package Manger
#+begin_src emacs-lisp 
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)


;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
#+end_src
** Misc Preferences 
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (xterm-mouse-mode 1))
(setq make-backup-files nil) ; stop creating ~ files
(setq auto-save-default nil) ; Disable autosave # files
(setq create-lockfiles nil) ; Disable .# files

(setq blink-cursor-mode nil)
(setq warning-minimum-level :emergency)
(electric-pair-mode 1) ; Auto closing pairs like () and {}
(setq use-short-answers t) ; Set y or n instead of yes or no for questions
(setq inhibit-startup-messages t) ; Disable splash screen
(save-place-mode) ; Save cursor position in buffer on reopen
(setq-default tab-width 2) ; self explanitory
(setq-default indent-tabs-mode nil) ; use spaces not tabs
(setq password-cache-expiry nil) ; so tramp doesnt keep prompting for passwords while connected

#+end_src
** Custom Functions
#+begin_src emacs-lisp

(defun ssh (host formatter)
  (let ((format-host (format formatter host host)))
    (find-file format-host)
    (toggle-ssh-term host host)
  )
)
(defun ssh-root (host)
  "SSH with sudo privledges using a host from .ssh/config"
  (interactive "sEnter host: ")
  (ssh host "/ssh:%s|sudo:%s:/")
)
(defun ssh-user (host)
  "SSH using a host from .ssh/config"
  (interactive "sEnter host: ")
  (ssh host "/ssh:%s:~")
)

(defvar active-toggle-term "*terminal*" "The most recently used toggle term")
(defvar current-toggles '("*terminal*") "List of the current toggle terms")

(defun toggle-term (&optional name)
  "Toggle a terminal window with $SHELL, and make it the active term

  If NAME is not provided, prompt to user for one. Closes any other toggle-terms
  currently open that aren't NAME

  NAME can be in the *name* format or just name, but the buffers' name will always output to *name*"
  (interactive)
  (let* (
    ;; Wrapping and unwrapping to force a *name* naming scheme
    (name (if name name (completing-read "Toggle-Term: " current-toggles)))
    (unwrapped-name (replace-regexp-in-string "\\*" "" name))
    (wrapped-name (format "*%s*" unwrapped-name))) 
      ;; Check if another toggle-term is active
      (dolist (c current-toggles)
        (if (string-equal c wrapped-name)
          nil
          (let ((w (get-buffer-window c)))
            (if w (delete-window w)))))
        ;; Toggle the term
        (let (
          (height (window-total-height))
          (window (get-buffer-window wrapped-name)))
            (if window (delete-window window)
                (select-window (split-window-below (round (* height 0.75))))
                (make-term unwrapped-name (getenv "SHELL")) ;This function wraps the "name" with *'s so it become *name* as the buffer name
                (setq active-toggle-term wrapped-name)
                (if (member wrapped-name current-toggles) nil (add-to-list 'current-toggles wrapped-name))
                (switch-to-buffer wrapped-name)
                (evil-insert 1))))
)
;; Most of this code is redundant but I dont care right now
(defun toggle-ssh-term (host &optional name)
  "Toggle a terminal window with $SHELL, and make it the active term

  If NAME is not provided, prompt to user for one. Closes any other toggle-terms
  currently open that aren't NAME

  NAME can be in the *name* format or just name, but the buffers' name will always output to *name*"
  (interactive)
  (let* (
    ;; Wrapping and unwrapping to force a *name* naming scheme
    (name (if name name (completing-read "Toggle-Term: " current-toggles)))
    (unwrapped-name (replace-regexp-in-string "\\*" "" name))
    (wrapped-name (format "*%s*" unwrapped-name))) 
      ;; Check if another toggle-term is active
      (dolist (c current-toggles)
        (if (string-equal c wrapped-name)
          nil
          (let ((w (get-buffer-window c)))
            (if w (delete-window w)))))
        ;; Toggle the term
        (let (
          (height (window-total-height))
          (window (get-buffer-window wrapped-name)))
            (if window (delete-window window)
                (select-window (split-window-below (round (* height 0.75))))
                (make-term unwrapped-name (getenv "SHELL") nil "-c" (format "ssh %s" name)) ;This function wraps the "name" with *'s so it become *name* as the buffer name
                (setq active-toggle-term wrapped-name)
                (if (member wrapped-name current-toggles) nil (add-to-list 'current-toggles wrapped-name))
                (switch-to-buffer wrapped-name)
                (evil-insert 1))))
)

(defun toggle-active-term ()
  "Toggle the most recently used toggle-term"
  (interactive)
  (toggle-term active-toggle-term)
)


(defun toggle-shell ()
  "Toggle a shell window"
  (interactive)
  (let (
    (w (get-buffer-window "*shell*"))
    (h (window-total-height)))
      (cond (
        (eq nil w)(select-window (split-window-below (round (* h 0.80))))(shell)(evil-insert 1))
        (t (delete-window w))))
)

(defun consult-find-in-dir ()
  "Find a file in a specific directory"
  (interactive)
  (let ((dir (file-name-directory (read-file-name "Find in directory: "))))
    (consult-find dir)
  )
)
(defun jl/erc-start-or-switch ()
  "Connects to ERC, or switch to last active buffer."
  (interactive)
  (if (get-buffer "Libera.Chat")
      (erc-track-switch-buffer 1)
    (when (y-or-n-p "Start ERC? ")
      (erc :server "irc.libera.chat" :port 6667 :nick "justinlime"))))
#+End_src


* Keybinds
** Evil Mode
#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-width 4)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(magit term neotree help dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)

;; These hooks may not work if TERM isnt xterm/xterm256
;; Change cursor to beam in insert mode
;; Doesnt work with eldoc for some reason
(unless (display-graphic-p)
  (add-hook 'evil-insert-state-entry-hook (lambda ()
    (setq visible-cursor nil) ;disables blinking cursor
    (send-string-to-terminal "\e[5 q")))
  ;; Change cursor to box in normal mode
  (add-hook 'evil-normal-state-entry-hook (lambda ()
    (setq visible-cursor nil) ;disables blinking cursor
    (send-string-to-terminal "\e[2 q"))) 
  (defun mkbeam (&rest r)
    (if (eq evil-state 'insert)
      (send-string-to-terminal "\e[5 q")
      (send-string-to-terminal "\e[2 q")))
  (advice-add 'eldoc-documentation-default :after #'mkbeam) ;;This oneeeee
  (advice-add 'eldoc-display-in-buffer :after #'mkbeam))

;; This work but closes all windows

;(define-key key-translation-map
;  (kbd "<escape>")  
;  (kbd "ESC"))  

;; This return C-m-g for some reason

;(define-key key-translation-map
;  (kbd "<escape>")  
;  (kbd "C-g"))  


#+end_src
** General Binds
#+begin_src emacs-lisp
(use-package general
  :config
  ;; Neotree
  (add-hook 'neotree-mode-hook #'(lambda()
  (general-define-key
    :states 'normal
    :keymaps 'neotree-mode-map
    "<tab>" #'neotree-change-root
    "TAB" #'neotree-change-root)))
  ;; Corfu
  (general-define-key
    :states 'insert
    :keymaps 'corfu-map
    "<tab>" #'corfu-next
    "TAB" #'corfu-next
    "<backtab>" #'corfu-previous)
  ;; Prevent evil from overriding corfu bindings
  (with-eval-after-load #'corfu
    (general-add-advice '(corfu--setup corfu--teardown) :after 'evil-normalize-keymaps)
    (evil-make-overriding-map corfu-map))
  ;; Vertico
  (general-define-key
   :keymaps 'vertico-map
   "RET" #'vertico-directory-enter
   "<tab>" #'vertico-next
   "TAB" #'vertico-next
   "<backtab>" #'vertico-previous)

  ;; Org
  (general-define-key
    :states 'normal 
    :keymaps 'org-mode-map
    "<tab>" #'org-cycle
    "TAB" #'org-cycle)

  ;; Evil
  (general-define-key
    :states 'insert
    "<tab>" #'tab-to-tab-stop
    "TAB" #'tab-to-tab-stop)
  (general-define-key
    :states '(normal insert visual emacs)
    "C-u" #'evil-scroll-up
    "C-d" #'evil-scroll-down)
  (general-define-key
    :states '(normal emacs)
    "J" #'shrink-window
    "K" #'enlarge-window
    "H" #'shrink-window-horizontally
    "L" #'enlarge-window-horizontally
    "R" #'undo-redo)

  ;; set up 'SPC' as the global leader key
  (general-create-definer leader
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (leader
    "w" '(:ignore t :wk "Window Navigation")
    "w h" '(evil-window-left :wk "Move left to window")
    "w j" '(evil-window-down :wk "Move down to window")
    "w k" '(evil-window-up :wk "Move up to window")
    "w l" '(evil-window-right :wk "Move right to window")
    "w s" '(evil-window-split :wk "Split window horizontally")
    "w v" '(evil-window-vsplit :wk "Split window vertically"))
  (leader
    "b" '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch to previous buffer/switch buffer by name")
    "b i" '(ibuffer :wk "Buffer Menu (IBuffer)")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b r" '(revert-buffer :wk "Reload this buffer"))
  (leader
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e r" '(eval-region :wk "Evaluate selected elisp")) 
  (leader
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Help function")
    "h v" '(describe-variable :wk "Help variable")
    "h m" '(describe-mode :wk "Help mode")
    "h c" '(describe-char :wk "Help character")
    "h k" '(describe-key :wk "Help key/keybind"))
  (leader
    "d" '(:ignore t :wk "Directory Tree")
    "d t" '(neotree-toggle :wk "Toggle Directory Tree")
    "d r" '(neotree-dir :wk "Change Directory Root"))
  (leader
    "f" '(:ignore t :wk "Find file")
    "f f" '(find-file :wk "Find file directly")
    "f r" '(consult-find :wk "Find file in current directory")
    "f d" '(consult-find-in-dir :wk "Find file in directory"))
  (leader
    "c" '(:ignore t :wk "Comment")
    "c r" '(comment-region :wk "Comment selection")
    "c l" '(comment-line :wk "Comment line"))
  (leader
    "t" '(:ignore t :wk "Toggle-Term")
    "t t" '(toggle-active-term :wk "Toggle the active toggle-term")
    "t c" '(toggle-term :wk "Change the active toggle-term")
    "t s" '(toggle-shell :wk "Toggle Shell"))
  (leader
    "s" '(:ignore t :wk "SSH")
    "s u" '(ssh-user :wk "SSH as user, using the ssh config file")
    "s r" '(ssh-root :wk "SSH as user with root privledges, using the ssh config file"))
)
#+end_src
** Keychord Binds
#+begin_src emacs-lisp
(use-package key-chord
  :init
  (key-chord-mode 1)
  :config
  (setq key-chord-two-keys-delay 1)
  (setq key-chord-one-key-delay 1.2)
  (setq key-chord-safety-interval-forward 0.1)
  (setq key-chord-safety-interval-backward 1)
  (key-chord-define evil-insert-state-map  "jj" 'evil-normal-state))
#+end_src 

* Functionality
** General
*** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
		which-key-sort-order #'which-key-key-order-alpha
		which-key-sort-uppercase-first nil
		which-key-add-column-padding 1
		which-key-max-display-columns nil
		which-key-min-display-lines 6
		which-key-side-window-slot -10
		which-key-side-window-max-height 0.25
		which-key-idle-delay 0.8
		which-key-max-description-length 25
		which-key-allow-imprecise-window-fit t
		which-key-separator " → " ))
#+end_src
*** Neotree
#+begin_src emacs-lisp
(use-package neotree
  :defer t
  :config
  (setq neo-theme (if (display-graphic-p) 'nerd)))
  (add-hook 'neotree-mode-hook #'(lambda ()
    (display-line-numbers-mode -1)
  )) 
#+end_src
*** Tramp
#+begin_src emacs-lisp
;; Speeds up tramp allegedly
(with-eval-after-load 'tramp
  (setq tramp-inline-compress-start-size 1000)
  (setq tramp-copy-size-limit 10000)
  (setq vc-handled-backends '(git))
  (setq tramp-default-method "rcp")
  (setq tramp-use-ssh-controlmaster-options nil)
  (setq projectile--mode-line "Projectile"))
#+end_src
*** Consult
#+begin_src emacs-lisp
(use-package consult
  :config
  (setq consult-find-args "find . -not ( -path '*/.git*' -prune )")
)
#+end_src
*** Undo Tree
#+begin_src emacs-lisp
;; (use-package undo-tree
;;   :config
;;   (global-undo-tree-mode))
#+end_src

** Programming
*** LSP/Completion
**** Eglot
#+begin_src emacs-lisp
(use-package eglot)
(add-hook 'prog-mode-hook (lambda()
  (unless (file-remote-p (buffer-file-name))
    (cond
      ((eq major-mode 'go-mode)(eglot-ensure))
      ((eq major-mode 'python-mode)(eglot-ensure))
      ((eq major-mode 'js-mode)(eglot-ensure))
      ((eq major-mode 'typescript-mode)(eglot-ensure))
    )
  )
))
#+end_src
**** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :config
  (setq corfu-popupinfo-delay 0)
  :custom
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 2)
  :init
  (corfu-popupinfo-mode)
  (global-corfu-mode)
  (corfu-history-mode))

(use-package corfu-terminal
  :ensure t
  :config
  (unless (display-graphic-p)
    (corfu-terminal-mode 1)))
#+end_src
**** Cape
#+begin_src emacs-lisp
(use-package cape
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src
**** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src
**** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+end_src
**** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  ;; (setq yas-snippet-dirs '("~/.config/emacs/snips"))
  (yas-global-mode 1))
#+end_src
*** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
(use-package git-gutter)

;; Disable git-gutter over tramp
(add-hook 'find-file-hook (lambda()
  (unless (file-remote-p (buffer-file-name))
    (git-gutter-mode t)
  )
))
#+end_src
*** Term
#+begin_src  emacs-lisp
(add-hook 'term-mode-hook #'(lambda()
  (face-remap-set-base 'default :background "#11111B")

  (defface term-background
  '((t (:inherit default :background "#11111B")))
  "Some bullshit to fix term mode text-background"
  :group 'basic-faces)

  (setf (elt ansi-term-color-vector 0) 'term-background)

  (display-line-numbers-mode -1)
))
#+end_src 
*** Modes
**** Python Mode
#+begin_src emacs-lisp
(defun python-hook ()
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
)

(add-hook 'python-mode-hook #'python-hook)
(add-hook 'python-ts-mode-hook #'python-mode)
#+end_src
**** Javascript Mode
#+begin_src emacs-lisp
(defun js-hook ()
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
  (setq js-indent-level 2)
)
(add-hook 'js-mode-hook #'js-hook)
(add-hook 'js-ts-mode-hook #'js-mode)
#+end_src
**** TypeScript Mode
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts[x]?\\'")

(defun typescript-hook ()
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
)
(add-hook 'typescript-mode-hook #'typescript-hook)
(add-hook 'typescript-ts-mode-hook #'typescript-mode)
#+end_src
**** Vue Mode
#+begin_src emacs-lisp 
(use-package vue-mode
  :mode "\\.vue\\'")

(defun vue-hook ()
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
)
(add-hook 'vue-mode-hook #'vue-hook)
#+end_src
**** Go Mode
#+begin_src emacs-lisp
(defun go-hook ()
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
)

(use-package go-mode
  :mode "\\.go\\'")

(add-hook 'go-mode-hook #'go-hook)
(add-hook 'go-ts-mode-hook #'go-mode)
#+end_src
**** Nix Mode
#+begin_src emacs-lisp
(defun nix-hook ()
)
(use-package nix-mode
 :mode "\\.nix\\'")
(add-hook 'nix-mode-hook #'nix-hook)
#+end_src
**** Lua Mode
#+begin_src emacs-lisp
(defun lua-hook()
  (setq tab-width 4)
)
(use-package lua-mode
  :mode "\\.lua\\'")
(add-hook 'lua-mode-hook #'lua-hook)
#+end_src

** Modes
*** Markdown Mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'")
#+end_src
*** Org Mode
**** Org General
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-src-preserve-indentation t)
(electric-indent-mode t)
#+end_src
**** Org Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-enable))
#+end_src
**** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :init 
  (with-eval-after-load 'org (global-org-modern-mode)))
#+end_src

* Look & Feel
** General
*** Themes
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 100) ; For current frame
(add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
;; (use-package solaire-mode
;;   :config
;;   (solaire-global-mode +1)
;; )
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-tokyo-night t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
*** Dired Rainbow
#+begin_src emacs-lisp
(use-package dired-rainbow
  :config
  (dired-rainbow-define-chmod directory "#cba6f7" "d.*")
  (dired-rainbow-define-chmod executable "#eba0ac" "-.*x.*")
  (dired-rainbow-define-chmod readable "#74c7ec" "-.*r.*"))
#+end_src
*** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-total-line-number t)
  (display-time-mode)
  :init (doom-modeline-mode 1))
#+end_src
*** GUI Settings
#+begin_src emacs-lisp
(setq use-dialog-box nil) ; No dialog box
(menu-bar-mode -1) ;Disable menu
(tool-bar-mode -1) ;Disable toolbar
(scroll-bar-mode -1) ;Disable scroll bar
(setq display-line-numbers-type 'relative) ;Realive numbers
(global-display-line-numbers-mode 1) ;Display line numbers
(setq-default truncate-lines t) ;Allow truncated lines
(pixel-scroll-precision-mode 1) ;Smooth scrolling
(setq mouse-wheel-progressive-speed nil) 
(setq scroll-conservatively 101)
#+end_src
*** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "RobotoMono Nerd Font"
  :height 130
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Roboto"
  :height 130
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "RobotoMono Nerd Font"
  :height 130
  :weight 'medium)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
(set-language-environment "UTF-8")
#+end_src
*** Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "RobotoMono Nerd Font"))

(use-package nerd-icons-dired
  :config  
  (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))

(use-package nerd-icons-corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
*** ERC
#+begin_src emacs-lisp
(use-package erc-hl-nicks
  :after erc)
(use-package erc-image
  :after erc)

(add-hook 'erc-mode-hook #'(lambda ()
  (toggle-truncate-lines) ; truncate lines in erc mode
  (display-line-numbers-mode -1)
))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :elpaca t
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (setq default-directory "~/")
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; Start dashboard for emacs clients
  (setq dashboard-startup-banner "~/.config/emacs/eyecropped.png")
  (setq dashboard-banner-logo-title "Whopper Whopper Whopper Whopper Junior Double Triple Whopper")
  (setq dashboard-footer-messages '("sudo systemctl restart justinlime"))
  (dashboard-setup-startup-hook))
#+end_src
** Programming
*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode))
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
#+end_src
*** Treesitter
#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :config
  (global-treesit-auto-mode))
  ;; (setq treesit-auto-install 'prompt))
  ;; (setq my-nix-ts-mode ;;this shit doesnt work :(
  ;;   (make-treesit-auto-recipe
  ;;     :lang 'nix
  ;;     :ts-mode 'nix-ts-mode
  ;;     :remap 'nix-mode
  ;;     :url "https://github.com/nix-community/tree-sitter-nix"
  ;;     :revision "master"
  ;;     :source-dir "src"))
  ;; (add-to-list 'treesit-auto-recipe-list my-nix-ts-mode))
  
#+end_src






